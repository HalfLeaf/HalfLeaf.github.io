export declare const capitalize: (word: string) => string;
export declare const strictCapitalize: (word: string) => string;
export declare const deepAssign: <T extends Record<string, any>, U extends Record<string, any> = T, V extends Record<string, any> = T>(originObject: T, ...assignObjects: U[]) => V;
export declare const deepAssignReverse: (...assignObjects: Record<string, any>[]) => Record<string, any>;
export declare const dom: {
    changeClass: (domClass: DOMTokenList, insert: string[], remove: string[]) => void;
};
export declare const i18n: {
    checkLang: (lang: string) => boolean;
    config: {
        container: Record<string, Record<string, string>>;
    };
    langs: import("./i18n/config").Langs[];
    lang2path: (lang: string) => string;
    path2lang: (path: string) => string;
    getDefaultLocale: () => import("../types").HopeLangI18nConfig;
    getLocale: (lang: string) => import("../types").HopeLangI18nConfig;
};
declare const _default: {
    deepAssign: <T extends Record<string, any>, U extends Record<string, any> = T, V extends Record<string, any> = T>(originObject: T, ...assignObjects: U[]) => V;
    deepAssignReverse: (...assignObjects: Record<string, any>[]) => Record<string, any>;
    i18n: {
        checkLang: (lang: string) => boolean;
        config: {
            container: Record<string, Record<string, string>>;
        };
        langs: import("./i18n/config").Langs[];
        lang2path: (lang: string) => string;
        path2lang: (path: string) => string;
        getDefaultLocale: () => import("../types").HopeLangI18nConfig;
        getLocale: (lang: string) => import("../types").HopeLangI18nConfig;
    };
};
export default _default;
