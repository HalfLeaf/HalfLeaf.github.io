"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const path_1 = require("path");
const chalk = require("chalk");
const fs = require("fs-extra");
const workboxBuild = require("workbox-build");
module.exports = (options, context) => {
    const config = {
        name: "pwa",
        // eslint-disable-next-line @typescript-eslint/naming-convention
        define: { SW_BASE_URL: context.base || "/" },
        globalUIComponents: options.popupComponent || "SWUpdatePopup",
        enhanceAppFiles: path_1.resolve(__dirname, "./enhanceAppFile.ts"),
        plugins: [
            /** typescript support */
            ["typescript"],
        ],
    };
    config.generated = () => __awaiter(void 0, void 0, void 0, function* () {
        console.log(chalk.cyan("wait"), "Generating service worker...");
        const swFilePath = path_1.resolve(context.outDir, "./service-worker.js");
        yield workboxBuild.generateSW(Object.assign({ swDest: swFilePath, globDirectory: context.outDir, globPatterns: [
                "**/*.{js,css,html,png,jpg,jpeg,gif,svg,woff,woff2,eot,ttf,otf}",
            ] }, (options.generateSWConfig || {})));
        yield fs.writeFile(swFilePath, yield fs.readFile(path_1.resolve(__dirname, "./skip-waiting.js"), "utf8"), { flag: "a" });
    });
    return config;
};
