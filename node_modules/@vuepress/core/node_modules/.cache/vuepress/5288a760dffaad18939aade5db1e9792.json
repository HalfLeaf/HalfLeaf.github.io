{"remainingRequest":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\vuepress-plugin-photo-swipe\\src\\PhotoSwipeUI.vue?vue&type=style&index=0&lang=stylus&","dependencies":[{"path":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\vuepress-plugin-photo-swipe\\src\\PhotoSwipeUI.vue","mtime":499162500000},{"path":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\css-loader\\dist\\cjs.js","mtime":1592788458817},{"path":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1592788498960},{"path":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\postcss-loader\\src\\index.js","mtime":1592788480096},{"path":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\stylus-loader\\index.js","mtime":1592788491948},{"path":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1592788438647},{"path":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\vue-loader\\lib\\index.js","mtime":1592788498951}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkByZXF1aXJlICd+cGhvdG9zd2lwZS9kaXN0L3Bob3Rvc3dpcGUuY3NzJwpAcmVxdWlyZSAnfnBob3Rvc3dpcGUvZGlzdC9kZWZhdWx0LXNraW4vZGVmYXVsdC1za2luLmNzcycK"},{"version":3,"sources":["PhotoSwipeUI.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiJA;AACA","file":"PhotoSwipeUI.vue","sourceRoot":"node_modules/vuepress-plugin-photo-swipe/src","sourcesContent":["<template>\n  <!-- Root element of PhotoSwipe. Must have class pswp. -->\n  <div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\n    <!-- Background of PhotoSwipe. \n    It's a separate element, as animating opacity is faster than rgba().-->\n    <div class=\"pswp__bg\" />\n\n    <!-- Slides wrapper with overflow:hidden. -->\n    <div class=\"pswp__scroll-wrap\">\n      <!-- Container that holds slides. PhotoSwipe keeps only 3 slides in DOM to save memory. -->\n      <div class=\"pswp__container\">\n        <!-- don't modify these 3 pswp__item elements, data is added later on -->\n        <div class=\"pswp__item\" />\n        <div class=\"pswp__item\" />\n        <div class=\"pswp__item\" />\n      </div>\n\n      <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->\n      <div class=\"pswp__ui pswp__ui--hidden\">\n        <div class=\"pswp__top-bar\">\n          <!--  Controls are self-explanatory. Order can be changed. -->\n\n          <div class=\"pswp__counter\" />\n\n          <button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\" />\n\n          <button class=\"pswp__button pswp__button--share\" title=\"Share\" />\n\n          <button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\" />\n\n          <button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\" />\n\n          <!-- Preloader demo https://codepen.io/dimsemenov/pen/yyBWoR -->\n          <!-- element will get class pswp__preloader--active when preloader is running -->\n          <div class=\"pswp__preloader\">\n            <div class=\"pswp__preloader__icn\">\n              <div class=\"pswp__preloader__cut\">\n                <div class=\"pswp__preloader__donut\" />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\n          <div class=\"pswp__share-tooltip\" />\n        </div>\n\n        <button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\" />\n\n        <button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\" />\n\n        <div class=\"pswp__caption\">\n          <div class=\"pswp__caption__center\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n/* global IMAGE_CONTAINER, IMAGE_SELECTOR, PHOTOSWIPE_OPTIONS */\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\nimport PhotoSwipe = require(\"photoswipe\");\nimport PhotoSwipeUIDefault = require(\"photoswipe/dist/photoswipe-ui-default\");\n\nlet images: NodeListOf<HTMLImageElement>;\n\n@Component\nexport default class PhotoSwipeUI extends Vue {\n  private photoswipe() {\n    const pswp = document.querySelector(\".pswp\") as HTMLElement;\n\n    this.getImages().then((imageConfig) => {\n      images.forEach((image, index) => {\n        image.onclick = () => {\n          const gallery = new PhotoSwipe(\n            pswp,\n            PhotoSwipeUIDefault,\n            imageConfig,\n            {\n              ...PHOTOSWIPE_OPTIONS,\n              index,\n            }\n          );\n          gallery.init();\n        };\n      });\n    });\n  }\n\n  private getImageInfo(image: HTMLImageElement) {\n    return {\n      src: image.src,\n      // eslint-disable-next-line id-length\n      w: image.naturalWidth,\n      h: image.naturalHeight,\n      title: image.alt,\n    };\n  }\n\n  private getImages() {\n    const promises: Promise<PhotoSwipe.Item>[] = [];\n    images = document.querySelectorAll<HTMLImageElement>(IMAGE_SELECTOR);\n\n    images.forEach((image, index) => {\n      promises[index] = new Promise((resolve, reject) => {\n        if (image.complete) resolve(this.getImageInfo(image));\n        else {\n          image.onload = () => resolve(this.getImageInfo(image));\n          image.onerror = (err) => reject(err);\n        }\n      });\n    });\n\n    return Promise.all(promises);\n  }\n\n  private mounted() {\n    const timer = setInterval(() => {\n      const content = document.querySelector<HTMLElement>(\n        IMAGE_CONTAINER\n      );\n      if (content) {\n        this.photoswipe();\n        clearInterval(timer);\n      }\n    }, 200);\n  }\n\n  @Watch(\"$route\")\n  onRouteChange() {\n    const timer = setInterval(() => {\n      const content = document.querySelector<HTMLElement>(\n        IMAGE_CONTAINER\n      );\n      if (content) {\n        this.photoswipe();\n        clearInterval(timer);\n      }\n    }, 200);\n  }\n}\n</script>\n\n<style lang=\"stylus\">\n@require '~photoswipe/dist/photoswipe.css'\n@require '~photoswipe/dist/default-skin/default-skin.css'\n</style>\n"]}]}