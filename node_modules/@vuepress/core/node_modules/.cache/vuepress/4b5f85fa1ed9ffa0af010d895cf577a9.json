{"remainingRequest":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\@vuepress\\core\\lib\\client\\root-mixins\\updateMeta.js","dependencies":[{"path":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\@vuepress\\core\\lib\\client\\root-mixins\\updateMeta.js","mtime":1592788429671},{"path":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1592788438647},{"path":"E:\\myself\\githubPage\\HalfLeaf.github.io\\node_modules\\babel-loader\\lib\\index.js","mtime":1592788437150}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJFOi9teXNlbGYvZ2l0aHViUGFnZS9IYWxmTGVhZi5naXRodWIuaW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIkU6L215c2VsZi9naXRodWJQYWdlL0hhbGZMZWFmLmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7CmltcG9ydCB1bmlvbkJ5IGZyb20gJ2xvZGFzaC91bmlvbkJ5JzsKZXhwb3J0IGRlZmF1bHQgewogIC8vIGNyZWF0ZWQgd2lsbCBiZSBjYWxsZWQgb24gYm90aCBjbGllbnQgYW5kIHNzcgogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLnNpdGVNZXRhID0gdGhpcy4kc2l0ZS5oZWFkVGFncy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMSksCiAgICAgICAgICBoZWFkZXJUeXBlID0gX3JlZjJbMF07CgogICAgICByZXR1cm4gaGVhZGVyVHlwZSA9PT0gJ21ldGEnOwogICAgfSkubWFwKGZ1bmN0aW9uIChfcmVmMykgewogICAgICB2YXIgX3JlZjQgPSBfc2xpY2VkVG9BcnJheShfcmVmMywgMiksCiAgICAgICAgICBfID0gX3JlZjRbMF0sCiAgICAgICAgICBoZWFkZXJWYWx1ZSA9IF9yZWY0WzFdOwoKICAgICAgcmV0dXJuIGhlYWRlclZhbHVlOwogICAgfSk7CgogICAgaWYgKHRoaXMuJHNzckNvbnRleHQpIHsKICAgICAgdmFyIG1lcmdlZE1ldGFJdGVtcyA9IHRoaXMuZ2V0TWVyZ2VkTWV0YVRhZ3MoKTsKICAgICAgdGhpcy4kc3NyQ29udGV4dC50aXRsZSA9IHRoaXMuJHRpdGxlOwogICAgICB0aGlzLiRzc3JDb250ZXh0LmxhbmcgPSB0aGlzLiRsYW5nOwogICAgICB0aGlzLiRzc3JDb250ZXh0LnBhZ2VNZXRhID0gcmVuZGVyUGFnZU1ldGEobWVyZ2VkTWV0YUl0ZW1zKTsKICAgIH0KICB9LAogIC8vIE90aGVyIGxpZmUgY3ljbGVzIHdpbGwgb25seSBiZSBjYWxsZWQgYXQgY2xpZW50CiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIC8vIGluaXQgY3VycmVudE1ldGFUYWdzIGZyb20gRE9NCiAgICB0aGlzLmN1cnJlbnRNZXRhVGFncyA9IF90b0NvbnN1bWFibGVBcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdtZXRhJykpOyAvLyB1cGRhdGUgdGl0bGUgLyBtZXRhIHRhZ3MKCiAgICB0aGlzLnVwZGF0ZU1ldGEoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHVwZGF0ZU1ldGE6IGZ1bmN0aW9uIHVwZGF0ZU1ldGEoKSB7CiAgICAgIGRvY3VtZW50LnRpdGxlID0gdGhpcy4kdGl0bGU7CiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nID0gdGhpcy4kbGFuZzsKICAgICAgdmFyIG5ld01ldGFUYWdzID0gdGhpcy5nZXRNZXJnZWRNZXRhVGFncygpOwogICAgICB0aGlzLmN1cnJlbnRNZXRhVGFncyA9IHVwZGF0ZU1ldGFUYWdzKG5ld01ldGFUYWdzLCB0aGlzLmN1cnJlbnRNZXRhVGFncyk7CiAgICB9LAogICAgZ2V0TWVyZ2VkTWV0YVRhZ3M6IGZ1bmN0aW9uIGdldE1lcmdlZE1ldGFUYWdzKCkgewogICAgICB2YXIgcGFnZU1ldGEgPSB0aGlzLiRwYWdlLmZyb250bWF0dGVyLm1ldGEgfHwgW107IC8vIHBhZ2VNZXRhVGFncyBoYXZlIGhpZ2hlciBwcmlvcml0eSB0aGFuIHNpdGVNZXRhVGFncwogICAgICAvLyBkZXNjcmlwdGlvbiBuZWVkcyBzcGVjaWFsIGF0dGVudGlvbiBhcyBpdCBoYXMgdG9vIG1hbnkgZW50cmllcwoKICAgICAgcmV0dXJuIHVuaW9uQnkoW3sKICAgICAgICBuYW1lOiAnZGVzY3JpcHRpb24nLAogICAgICAgIGNvbnRlbnQ6IHRoaXMuJGRlc2NyaXB0aW9uCiAgICAgIH1dLCBwYWdlTWV0YSwgdGhpcy5zaXRlTWV0YSwgbWV0YUlkZW50aWZpZXIpOwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgICRwYWdlOiBmdW5jdGlvbiAkcGFnZSgpIHsKICAgICAgdGhpcy51cGRhdGVNZXRhKCk7CiAgICB9CiAgfSwKICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkgewogICAgdXBkYXRlTWV0YVRhZ3MobnVsbCwgdGhpcy5jdXJyZW50TWV0YVRhZ3MpOwogIH0KfTsKLyoqDQogKiBSZXBsYWNlIGN1cnJlbnRNZXRhVGFncyB3aXRoIG5ld01ldGFUYWdzDQogKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IG5ld01ldGFUYWdzDQogKiBAcGFyYW0ge0FycmF5PEhUTUxFbGVtZW50Pn0gY3VycmVudE1ldGFUYWdzDQogKiBAcmV0dXJucyB7QXJyYXk8SFRNTEVsZW1lbnQ+fQ0KICovCgpmdW5jdGlvbiB1cGRhdGVNZXRhVGFncyhuZXdNZXRhVGFncywgY3VycmVudE1ldGFUYWdzKSB7CiAgaWYgKGN1cnJlbnRNZXRhVGFncykgewogICAgX3RvQ29uc3VtYWJsZUFycmF5KGN1cnJlbnRNZXRhVGFncykuZmlsdGVyKGZ1bmN0aW9uIChjKSB7CiAgICAgIHJldHVybiBjLnBhcmVudE5vZGUgPT09IGRvY3VtZW50LmhlYWQ7CiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7CiAgICAgIHJldHVybiBkb2N1bWVudC5oZWFkLnJlbW92ZUNoaWxkKGMpOwogICAgfSk7CiAgfQoKICBpZiAobmV3TWV0YVRhZ3MpIHsKICAgIHJldHVybiBuZXdNZXRhVGFncy5tYXAoZnVuY3Rpb24gKG0pIHsKICAgICAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ21ldGEnKTsKICAgICAgT2JqZWN0LmtleXMobSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgdGFnLnNldEF0dHJpYnV0ZShrZXksIG1ba2V5XSk7CiAgICAgIH0pOwogICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHRhZyk7CiAgICAgIHJldHVybiB0YWc7CiAgICB9KTsKICB9Cn0KLyoqDQogKiBUcnkgdG8gaWRlbnRpZnkgYSBtZXRhIHRhZyBieSBuYW1lLCBwcm9wZXJ0eSBvciBpdGVtcHJvcA0KICoNCiAqIFJldHVybiBhIGNvbXBsZXRlIHN0cmluZyBpZiBub25lIHByb3ZpZGVkDQogKiBAcGFyYW0ge09iamVjdH0gdGFnIGZyb20gZnJvbnRtYXR0ZXIgb3Igc2l0ZU1ldGFUYWdzDQogKiBAcmV0dXJucyB7U3RyaW5nfQ0KICovCgoKZnVuY3Rpb24gbWV0YUlkZW50aWZpZXIodGFnKSB7CiAgZm9yICh2YXIgX2kgPSAwLCBfYXJyID0gWyduYW1lJywgJ3Byb3BlcnR5JywgJ2l0ZW1wcm9wJ107IF9pIDwgX2Fyci5sZW5ndGg7IF9pKyspIHsKICAgIHZhciBpdGVtID0gX2FycltfaV07CiAgICBpZiAodGFnLmhhc093blByb3BlcnR5KGl0ZW0pKSByZXR1cm4gdGFnW2l0ZW1dICsgaXRlbTsKICB9CgogIHJldHVybiBKU09OLnN0cmluZ2lmeSh0YWcpOwp9Ci8qKg0KICogUmVuZGVyIG1ldGEgdGFncw0KICoNCiAqIEBwYXJhbSB7QXJyYXl9IG1ldGENCiAqIEByZXR1cm5zIHtTdHJpbmd9DQogKi8KCgpmdW5jdGlvbiByZW5kZXJQYWdlTWV0YShtZXRhKSB7CiAgaWYgKCFtZXRhKSByZXR1cm4gJyc7CiAgcmV0dXJuIG1ldGEubWFwKGZ1bmN0aW9uIChtKSB7CiAgICB2YXIgcmVzID0gIjxtZXRhIjsKICAgIE9iamVjdC5rZXlzKG0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICByZXMgKz0gIiAiLmNvbmNhdChrZXksICI9XCIiKS5jb25jYXQobVtrZXldLCAiXCIiKTsKICAgIH0pOwogICAgcmV0dXJuIHJlcyArICI+IjsKICB9KS5qb2luKCdcbiAgICAnKTsKfQ=="},{"version":3,"sources":["E:/myself/githubPage/HalfLeaf.github.io/node_modules/@vuepress/core/lib/client/root-mixins/updateMeta.js"],"names":["unionBy","created","siteMeta","$site","headTags","filter","headerType","map","_","headerValue","$ssrContext","mergedMetaItems","getMergedMetaTags","title","$title","lang","$lang","pageMeta","renderPageMeta","mounted","currentMetaTags","document","querySelectorAll","updateMeta","methods","documentElement","newMetaTags","updateMetaTags","$page","frontmatter","meta","name","content","$description","metaIdentifier","watch","beforeDestroy","c","parentNode","head","forEach","removeChild","m","tag","createElement","Object","keys","key","setAttribute","appendChild","item","hasOwnProperty","JSON","stringify","res","join"],"mappings":"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","sourcesContent":["import unionBy from 'lodash/unionBy'\r\n\r\nexport default {\r\n  // created will be called on both client and ssr\r\n  created () {\r\n    this.siteMeta = this.$site.headTags\r\n      .filter(([headerType]) => headerType === 'meta')\r\n      .map(([_, headerValue]) => headerValue)\r\n\r\n    if (this.$ssrContext) {\r\n      const mergedMetaItems = this.getMergedMetaTags()\r\n\r\n      this.$ssrContext.title = this.$title\r\n      this.$ssrContext.lang = this.$lang\r\n      this.$ssrContext.pageMeta = renderPageMeta(mergedMetaItems)\r\n    }\r\n  },\r\n  // Other life cycles will only be called at client\r\n  mounted () {\r\n    // init currentMetaTags from DOM\r\n    this.currentMetaTags = [...document.querySelectorAll('meta')]\r\n\r\n    // update title / meta tags\r\n    this.updateMeta()\r\n  },\r\n\r\n  methods: {\r\n    updateMeta () {\r\n      document.title = this.$title\r\n      document.documentElement.lang = this.$lang\r\n\r\n      const newMetaTags = this.getMergedMetaTags()\r\n      this.currentMetaTags = updateMetaTags(newMetaTags, this.currentMetaTags)\r\n    },\r\n\r\n    getMergedMetaTags () {\r\n      const pageMeta = this.$page.frontmatter.meta || []\r\n      // pageMetaTags have higher priority than siteMetaTags\r\n      // description needs special attention as it has too many entries\r\n      return unionBy([{ name: 'description', content: this.$description }],\r\n        pageMeta, this.siteMeta, metaIdentifier)\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    $page () {\r\n      this.updateMeta()\r\n    }\r\n  },\r\n\r\n  beforeDestroy () {\r\n    updateMetaTags(null, this.currentMetaTags)\r\n  }\r\n}\r\n\r\n/**\r\n * Replace currentMetaTags with newMetaTags\r\n * @param {Array<Object>} newMetaTags\r\n * @param {Array<HTMLElement>} currentMetaTags\r\n * @returns {Array<HTMLElement>}\r\n */\r\nfunction updateMetaTags (newMetaTags, currentMetaTags) {\r\n  if (currentMetaTags) {\r\n    [...currentMetaTags]\r\n          .filter(c => c.parentNode === document.head)\r\n          .forEach(c => document.head.removeChild(c))\r\n  }\r\n  if (newMetaTags) {\r\n    return newMetaTags.map(m => {\r\n      const tag = document.createElement('meta')\r\n      Object.keys(m).forEach(key => {\r\n        tag.setAttribute(key, m[key])\r\n      })\r\n      document.head.appendChild(tag)\r\n      return tag\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Try to identify a meta tag by name, property or itemprop\r\n *\r\n * Return a complete string if none provided\r\n * @param {Object} tag from frontmatter or siteMetaTags\r\n * @returns {String}\r\n */\r\nfunction metaIdentifier (tag) {\r\n  for (const item of ['name', 'property', 'itemprop']) {\r\n    if (tag.hasOwnProperty(item)) return tag[item] + item\r\n  }\r\n  return JSON.stringify(tag)\r\n}\r\n\r\n/**\r\n * Render meta tags\r\n *\r\n * @param {Array} meta\r\n * @returns {String}\r\n */\r\n\r\nfunction renderPageMeta (meta) {\r\n  if (!meta) return ''\r\n  return meta.map(m => {\r\n    let res = `<meta`\r\n    Object.keys(m).forEach(key => {\r\n      res += ` ${key}=\"${m[key]}\"`\r\n    })\r\n    return res + `>`\r\n  }).join('\\n    ')\r\n}\r\n"]}]}